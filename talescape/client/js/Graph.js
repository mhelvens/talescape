'use strict';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
define(['jquery'], function ($) { //////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	function Graph() { /////////////////////////////////////////////////////////////////////////////////////////////////
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		var that = this;


//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//      // Private Variables ///////////////////////////////////////////////////////////////////////////////////////////
//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		var _vertices = {};

		var _edges = {};

		var _reverseEdges = {}; // contains no values (_edges does)


//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//      // Private Methods /////////////////////////////////////////////////////////////////////////////////////////////
//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		function _assertVertex(a) {
			if (!that.hasVertex(a)) {
				throw new ReferenceError("This Graph does not contain a vertex '" + a + "'.");
			}
		}


		function _assertEdge(a, b) {
			if (!that.hasEdge(a)) {
				throw new ReferenceError("This Graph does not contain an edge '(" + a + ", " + b + ")'.");
			}
		}


//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//      // Privileged Methods //////////////////////////////////////////////////////////////////////////////////////////
//      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////


		this.addVertex = function (a) {
			_vertices[a] = null;
			_edges[a] = {};
			_reverseEdges[a] = {};
			return {
				value: function (v) {
					_vertices[a] = v;
				}
			};
		};


		this.addEdge = function (a, b) {
			_assertVertex(a);
			_assertVertex(b);
			_edges[a][b] = null;
			_reverseEdges[b][a] = null;
			return {
				value: function (v) {
					_edges[a][b] = v;
				}
			};
		};


		this.hasVertex = function (a) {
			return _vertices[a] !== undefined;
		};


		this.vertexValue = function (a) {
			return _vertices[a];
		};


		this.hasEdge = function (a, b) {
			return that.hasVertex(a) &&
			       that.hasVertex(b) &&
			       _edges[a][b] !== undefined;
		};


		this.edgeValue = function (a, b) {
			_assertVertex(a);
			_assertVertex(b);
			return _edges[a][b];
		};


		this.eachVertex = function (handler) {
			$.each(_vertices, handler);
		};


		this.eachVertexFrom = function (a, handler) {
			_assertVertex(a);
			$.each(_edges[a], function (b) {
				handler(b, that.vertexValue(b));
			});
		};


		this.eachVertexTo = function (b, handler) {
			_assertVertex(b);
			$.each(_reverseEdges[b], function (a) {
				handler(a, that.vertexValue(a));
			});
		};


		this.eachEdge = function (handler) {
			$.each(_edges, function (a, B) {
				$.each(B, function (b, v) {
					handler(a, b, v);
				});
			});
		};


		this.topologically = function (handler) {
			var that = this;
			var visited = [];
			var handled = {};

			function visit(a) {
				visited.push(a);

				var i = $.inArray(a, visited);
				if (i !== visited.length - 1) {
					var cycle = visited.slice(i).reverse();
					throw new that.CycleError(cycle, "This Graph object contains a cycle: " + cycle);
				}

				if (!handled[a]) {
					that.eachVertexTo(a, visit);
					handled[a] = { returned: handler(a, that.vertexValue(a)) };
				}

				visited.pop();
			}

			this.eachVertex(function (a) {
				if (!handled[a]) {
					visit(a);
				}
			});
		};


//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}// Public Methods /////////////////////////////////////////////////////////////////////////////////////////////////
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	Graph.prototype.add = function () {
		var that = this;
		var valueCallbacks = $.Callbacks();
		$.each(arguments, function (i, a) {
			if ($.isArray(a)) {
				valueCallbacks.add(that.addEdge(a[0], a[1]).value);
			} else {
				valueCallbacks.add(that.addVertex(a).value);
			}
		});

		return {
			value: valueCallbacks.fire
		};
	};


//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  // Exceptions //////////////////////////////////////////////////////////////////////////////////////////////////////
//  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	Graph.prototype.CycleError = function (cycle, message) {
		this.message = message;
		this.cycle = cycle;
	};
	Graph.prototype.CycleError.prototype = new Error();
	Graph.prototype.CycleError.prototype.constructor = Graph.prototype.CycleError;
	Graph.prototype.CycleError.prototype.name = 'CycleError';


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
});/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
